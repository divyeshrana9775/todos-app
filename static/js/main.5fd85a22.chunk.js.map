{"version":3,"sources":["Component/header.js","Component/todoitem.js","Component/todoinput.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","TodoItem","props","id","this","removeTodo","className","onClick","e","todo","text","TodoInput","state","value","handleChange","bind","addTodo","setState","target","length","type","onChange","App","todos","nextId","todoText","slice","push","filter","index","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TASeA,E,iLALX,OACI,mD,GAHaC,aCiBNC,G,kBAff,WAAYC,GAAO,qEACTA,I,wEAECC,GACPC,KAAKF,MAAMG,WAAWF,K,+BAEjB,IAAD,OACJ,OACI,yBAAKG,UAAU,eACX,4BAAQA,UAAU,aAAaC,QAAS,SAACC,GAAD,OAAK,EAAKH,WAAW,EAAKH,MAAMC,MAAxE,UACCC,KAAKF,MAAMO,KAAKC,U,GAXNV,cC+BRW,G,wBA9BX,WAAYT,GAAO,IAAD,8BAClB,4CAAMA,KACDU,MAAQ,CACTC,MAAM,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBANG,E,0EASLP,GACTJ,KAAKa,SAAS,CACbJ,MAAOL,EAAEU,OAAOL,U,8BAGbJ,GACDA,EAAKU,OAAS,IACbf,KAAKF,MAAMc,QAAQP,GACnBL,KAAKa,SAAS,CAACJ,MAAO,Q,+BAGrB,IAAD,OACR,OACI,6BACI,2BAAOO,KAAK,OAAOP,MAAOT,KAAKQ,MAAMC,MAAOQ,SAAUjB,KAAKU,eAC3D,4BAAQR,UAAU,kBAAkBC,QAAS,kBAAK,EAAKS,QAAQ,EAAKJ,MAAMC,SAA1E,e,GAzBYb,cCkDTsB,E,YA9Cb,WAAYpB,GAAO,IAAD,8BAChB,4CAAMA,KACDU,MAAM,CACTW,MAAM,CACJ,CAACpB,GAAG,EAAGO,KAAM,wBACb,CAACP,GAAG,EAAGO,KAAM,oBACb,CAACP,GAAG,EAAGO,KAAM,8BAEfc,OAAO,GAET,EAAKR,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAXF,E,qEAaVU,GACN,IAAIF,EAAQnB,KAAKQ,MAAMW,MAAMG,QAC7BH,EAAMI,KAAK,CAACxB,GAAIC,KAAKQ,MAAMY,OAAQd,KAAMe,IACzCrB,KAAKa,SAAS,CACZM,MAAOA,EACPC,SAAUpB,KAAKQ,MAAMY,W,iCAGdrB,GACTC,KAAKa,SAAS,CACZM,MAAOnB,KAAKQ,MAAMW,MAAMK,QAAO,SAACnB,EAAMoB,GAAP,OAAiBpB,EAAKN,KAAMA,S,+BAGtD,IAAD,OACN,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,gBAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWmB,SAAS,GAAGT,QAASZ,KAAKY,UACrC,4BAEIZ,KAAKQ,MAAMW,MAAMO,KAAI,SAACrB,GACpB,OAAO,kBAAC,EAAD,CAAUA,KAAMA,EAAMsB,IAAKtB,EAAKN,GAAIA,GAAIM,EAAKN,GAAIE,WAAY,EAAKA,uB,GArCvEL,aCMEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5fd85a22.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Header extends Component{\r\nrender(){\r\n    return(\r\n        <h1>React-Todo-List</h1>\r\n    )\r\n}\r\n}\r\nexport default Header;","import React, {Component} from 'react';\r\nimport './todoItem.css';\r\n\r\nclass TodoItem extends Component{\r\nconstructor(props){\r\n    super(props);\r\n}\r\nremoveTodo(id){\r\n    this.props.removeTodo(id);\r\n}\r\nrender(){\r\n    return(\r\n        <div className=\"todoWrapper\">\r\n            <button className=\"removeTodo\" onClick={(e)=>this.removeTodo(this.props.id)}>remove</button>\r\n            {this.props.todo.text}\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport './todoinput.css';\r\n\r\nclass TodoInput extends Component{\r\n    constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        value:\"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.addTodo = this.addTodo.bind(this);\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({\r\n         value: e.target.value\r\n        });\r\n    }\r\n    addTodo(todo){\r\n        if(todo.length > 0){\r\n            this.props.addTodo(todo);\r\n            this.setState({value: ''});\r\n        }\r\n    }\r\n    render(){\r\n    return(\r\n        <div>\r\n            <input type='text' value={this.state.value} onChange={this.handleChange}/>\r\n            <button className=\"btn btn-primary\" onClick={()=> this.addTodo(this.state.value)}>Submit</button>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default TodoInput;\r\n","import React, {Component} from 'react';\nimport Header from './Component/header';\nimport TodoItem from './Component/todoitem';\nimport './App.css';\nimport TodoInput from './Component/todoinput';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      todos:[\n        {id:0, text: \"Make dinner tonight!\"},\n        {id:1, text: \"Fold the Laundry\"},\n        {id:2, text: \"Learn to make a React App\"}\n      ],\n      nextId:3\n    }\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n  addTodo(todoText){\n    let todos = this.state.todos.slice();\n    todos.push({id: this.state.nextId, text: todoText});\n    this.setState({\n      todos: todos,\n      nextId: ++this.state.nextId\n    });\n  }\n  removeTodo(id){\n    this.setState({\n      todos: this.state.todos.filter((todo, index) => todo.id !==id)\n    })\n  }\n  render(){\n    return(\n      <div className='App'>\n        <div className='todo-wrapper'>\n         \n          <Header />\n          <TodoInput todoText=\"\" addTodo={this.addTodo}/>\n          <ul>\n            {\n              this.state.todos.map((todo)=>{\n                return <TodoItem todo={todo} key={todo.id} id={todo.id} removeTodo={this.removeTodo}/>\n              })\n            }\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}